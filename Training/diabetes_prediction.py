# -*- coding: utf-8 -*-
"""Diabetes Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1D9l8cAMczGA59-57ZoKmO4OGZPW1ezma
"""

import numpy as np
import pandas as pd
import warnings
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score



"""Data Analysis/Gathering"""

#load data into pandas DataFrame
diabetes_dataset = pd.read_csv('/content/diabetes.csv')

pd.read_csv?

#print 5 rows of dataset
diabetes_dataset.head()

# number of rows/columns in dataset
diabetes_dataset.shape

#get stats from dataset
diabetes_dataset.describe()

diabetes_dataset['Outcome'].value_counts()



"""0 = Non-Diabetic
1 = Diabetic
"""

diabetes_dataset.groupby('Outcome').mean()

#seperate data and labels
X = diabetes_dataset.drop(columns = 'Outcome', axis = 1)
Y = diabetes_dataset['Outcome']

print(X)

print(Y)

"""Data Standardization"""

with warnings.catch_warnings():
    warnings.filterwarnings("ignore", category=UserWarning)
    scaler = StandardScaler()
    scaler.fit(X)

standardized_data = scaler.transform(X)

print(standardized_data)

X = standardized_data
Y = diabetes_dataset['Outcome']

print(X)
print(Y)

"""Training"""

X_train, X_test, Y_train, Y_test = train_test_split( X,Y, test_size= 0.2, stratify = Y, random_state = 2)

print(X.shape, X_train.shape, X_test.shape)

"""Training Model"""

classifier = svm.SVC(kernel = 'linear')

#Train support vector Machine
classifier.fit(X_train, Y_train)

"""Model Evaluation

Accuracy Score
"""

#accuracy score on training data
X_train_prediction = classifier.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)

print('Accuracy Score of training data : ', training_data_accuracy)

#accuracy score on test data
X_test_prediction = classifier.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)

print('Accuracy Score of test data : ', test_data_accuracy)

"""Predicitve System"""

input_data = (5,166,72,19,175,25.8,0.587,51)

#change the input data to numpy array
input_data_as_numpy_array = np.asarray(input_data)

#reshape the array to predict for one instance
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

#standardize the input data
std_data = scaler.transform(input_data_reshaped)
print(std_data)

prediction = classifier.predict(std_data)
print(prediction)

if (prediction[0]==0):
  print("Non Diabetic")
else:
  print("Diabetic")

"""Save the trained model"""

import pickle

filename = 'trained_model.sav'
pickle.dump(classifier, open(filename, 'wb'))

#Load the saved model
loaded_model = pickle.load(open('trained_model.sav', 'rb'))#rb is reading the binary format

input_data = (5,166,72,19,175,25.8,0.587,51)

#change the input data to numpy array
input_data_as_numpy_array = np.asarray(input_data)

#reshape the array to predict for one instance
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

#standardize the input data
std_data = scaler.transform(input_data_reshaped)
print(std_data)

prediction = loaded_model.predict(std_data)
print(prediction)

if (prediction[0]==0):
  print("Non Diabetic")
else:
  print("Diabetic")